# Define the search term
$searchTerm = Read-Host "Enter search term"

# Tokenize the search term
$searchTokens = $searchTerm -split '\s+'

# Load the text file into an array
$lines = Get-Content -Path 'CAL7ps.txt'

# Calculate the relevance of each line to the search term
$matches = @()
foreach ($line in $lines) {
    $lineTokens = $line -split '\s+'
    $matchedTokens = Compare-Object $searchTokens $lineTokens -IncludeEqual -ExcludeDifferent -PassThru
    $relevance = $matchedTokens.Count / $lineTokens.Count
    $matches += [pscustomobject]@{ Line = $line; Relevance = $relevance }
}

# Sort the matches by relevance
$matches = $matches | Sort-Object -Property Relevance -Descending

# Select the top 10 matches
$top10 = $matches | Select-Object -First 10 | Select-Object -ExpandProperty Line

# Output the top 10 matches
Write-Host "Top 10 matches for '$searchTerm':"
$top10


# Create an array of hashtables with the search term, top 10 matches, and the messages array
$messages = @(
    @{ "role" = "system"; "content" = "You are Rimini Street and are answering questions in a questionnaire." },
    @{ "role" = "user"; "content" = "The question is:", $searchTerm, "please answer, using the following information.  Please do not answer yes if the content indicates no:"},
    @{ "role" = "user"; "content" = $top10 }
)
# Print the number of tokens in the messages variable
$tokens = ($messages.messages | ForEach-Object { $_.content -split '\s+' }) | Measure-Object | Select-Object -ExpandProperty Count
Write-Host "Number of tokens in messages: $tokens"
# Create a hashtable with the model and messages array
$data = @{
    model = "gpt-3.5-turbo"
    messages = $messages
	temperature = 0.5
	max_tokens = 600
}
Write-Output $messages

# Convert the hashtable to JSON
$jsonData = ConvertTo-Json $data
Write-Output $jsonData

# Set the API endpoint URL
$apiUrl = 'https://api.openai.com/v1/chat/completions'
# Set the request headers
$headers = @{
    'Content-Type' = 'application/json'
    'Authorization' = 'Bearer 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'
}
Write-Output $headers
# Send the JSON data to the API using the Invoke-RestMethod cmdlet
try {
    $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonData -ErrorAction Stop
	$response | Out-File -FilePath "response.txt" -Width 5000
	$response.choices | Out-File -FilePath "response.txt" -Append -Width 5000
	Write-Host $response.choices
    $messages | Out-File -FilePath "messages.txt" -Append -Width 5000
	Write-Host $messages
    Write-Host "API call successful."
}
catch {
    $errorMessage = $_.Exception.Message
    $errorMessage | Out-File -FilePath "error.txt" -Append -Width 5000
    Write-Host "API call failed. Error message written to error.txt."
}
